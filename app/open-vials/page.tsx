'use client'

import { useEffect, useMemo, useState } from 'react'
import classNames from 'classnames'
import * as XLSX from 'xlsx'
import Link from 'next/link'
import {
  MagnifyingGlassIcon,
  RectangleStackIcon,
  ArrowPathIcon,
  BuildingStorefrontIcon,
  Squares2X2Icon,
  ArrowTopRightOnSquareIcon,
} from '@heroicons/react/24/outline'
import {
  BeakerIcon,
  ChartBarIcon,
} from '@heroicons/react/24/solid'

/* ========= Types ========= */
type Warehouse = { id: number; name: string; type: 'MAIN' | 'SUB'; note?: string | null }
type Row = {
  id: string                // üëà ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å number ‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö API
  warehouseId: number
  vaccineId: number | null
  lotNo: string
  dosesTotal: number
  dosesUsed: number
  openedAt: string
  expiresAt: string
  status: 'OPEN' | 'EXPIRED'
  vaccine?: { id: number; name: string } | null
}

/* ========= Small UI helpers ========= */
function IconBadge({
  children,
  ring = true,
  size = 'md',
}: {
  children: React.ReactNode
  ring?: boolean
  size?: 'sm' | 'md' | 'lg'
}) {
  const sz =
    size === 'sm'
      ? 'h-8 w-8 text-[14px]'
      : size === 'lg'
      ? 'h-12 w-12 text-[18px]'
      : 'h-10 w-10 text-[16px]'
  return (
    <span
      className={classNames(
        'inline-flex items-center justify-center rounded-xl text-white shadow-sm',
        'bg-gradient-to-tr from-sky-400 via-violet-400 to-pink-400',
        ring && 'ring-1 ring-violet-200/60'
      )}
      style={{ backdropFilter: 'saturate(140%) blur(0.5px)' }}
    >
      <span className={classNames('flex items-center justify-center', sz)}>{children}</span>
    </span>
  )
}

function RainbowChip({ label }: { label: string }) {
  return (
    <span className="inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-xs font-medium text-slate-700 bg-white shadow-sm ring-1 ring-slate-200">
      <span className="h-2 w-2 rounded-full bg-gradient-to-r from-sky-400 via-fuchsia-400 to-emerald-400" />
      {label}
    </span>
  )
}

/* ========= Utils ========= */
const fmtDateTime = (iso?: string | null) => {
  if (!iso) return '-'
  try { return new Date(iso).toLocaleString() } catch { return iso || '-' }
}
const msLeft = (iso?: string | null) => {
  if (!iso) return 0
  return new Date(iso).getTime() - Date.now()
}
const timeLeftText = (ms: number) => {
  if (ms <= 0) return '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß'
  const h = Math.floor(ms / 3600000)
  const m = Math.floor((ms % 3600000) / 60000)
  return `${h}‡∏ä‡∏° ${m}‡∏ô`
}
const leftBadge = (ms: number) => {
  if (ms <= 0) return 'bg-rose-50 text-rose-700 ring-rose-200'
  if (ms <= 60 * 60 * 1000) return 'bg-rose-50 text-rose-700 ring-rose-200'
  if (ms <= 4 * 60 * 60 * 1000) return 'bg-amber-50 text-amber-700 ring-amber-200'
  return 'bg-emerald-50 text-emerald-700 ring-emerald-200'
}

/* ========= Page ========= */
export default function OpenVialsPage() {
  const [warehouses, setWarehouses] = useState<Warehouse[]>([])
  const [warehouseId, setWarehouseId] = useState<number | ''>('')
  const [vaccineId, setVaccineId] = useState<number | ''>('') // (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï filter ‡∏ï‡∏≤‡∏° id)
  const [status, setStatus] = useState<'OPEN' | 'EXPIRED' | 'ALL'>('OPEN')
  const [q, setQ] = useState('')

  const [rows, setRows] = useState<Row[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  // ----- load warehouses: SUB ‡∏Å‡πà‡∏≠‡∏ô -----
  const loadWarehouses = async () => {
    try {
      const res = await fetch('/api/warehouses?limit=200', { cache: 'no-store' })
      const data = await res.json()
      const items: Warehouse[] = (data.items ?? []) as Warehouse[]
      const sorted = items.slice().sort((a, b) => {
        if (a.type === b.type) return a.name.localeCompare(b.name)
        return a.type === 'SUB' ? -1 : 1
      })
      setWarehouses(sorted)
      if (!warehouseId && sorted.length > 0) {
        const sub = sorted.find(w => w.type === 'SUB')
        setWarehouseId(sub?.id ?? sorted[0].id)
      }
    } catch (e) {
      console.error(e)
    }
  }
  useEffect(() => { loadWarehouses() }, [])

  // ----- load open vials -----
  const load = async () => {
    if (!warehouseId) return
    setLoading(true)
    setError('')
    try {
      const sp = new URLSearchParams()
      sp.set('warehouseId', String(warehouseId))
      if (vaccineId) sp.set('vaccineId', String(vaccineId))
      if (status !== 'ALL') sp.set('status', status)
      sp.set('limit', '500')

      const res = await fetch(`/api/open-vials?${sp.toString()}`, { cache: 'no-store' })
      const text = await res.text()
      if (!res.ok) {
        if (res.status === 401 || res.status === 403) {
          setError('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
          setRows([])
          return
        }
        try {
          const j = JSON.parse(text)
          throw new Error(j?.message || '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        } catch {
          throw new Error(text?.slice(0, 200) || '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        }
      }
      let data: any
      try { data = JSON.parse(text) } catch { throw new Error('API /open-vials ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON') }
      const items: Row[] = data?.items ?? data ?? []
      setRows(items)
    } catch (e: any) {
      setError(e?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
      setRows([])
    } finally {
      setLoading(false)
    }
  }

  // load ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô filter
  useEffect(() => {
    load()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [warehouseId, status, vaccineId])

  // ‚è± auto refresh ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥
  useEffect(() => {
    if (!warehouseId) return
    const t = setInterval(load, 30_000)
    return () => clearInterval(t)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [warehouseId, status, vaccineId])

  // ----- client filter: lotNo / vaccine name -----
  const filtered = useMemo(() => {
    const t = q.trim().toLowerCase()
    if (!t) return rows
    return rows.filter(r => {
      const name = (r.vaccine?.name ?? '').toLowerCase()
      return r.lotNo.toLowerCase().includes(t) || name.includes(t)
    })
  }, [rows, q])

  // ----- small stats -----
  const totalOpen = filtered.filter(r => r.status === 'OPEN').length
  const totalRemain = filtered.reduce((sum, r) => sum + Math.max(0, r.dosesTotal - r.dosesUsed), 0)

  // ----- export -----
  const handleExportExcel = () => {
    const data = filtered.map(r => {
      const remain = Math.max(0, r.dosesTotal - r.dosesUsed)
      const ms = msLeft(r.expiresAt)
      const timeText = timeLeftText(ms)
      return {
        ‡∏Ñ‡∏•‡∏±‡∏á: r.warehouseId,
        ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô: r.vaccine?.name ?? '-',
        ‡∏•‡πá‡∏≠‡∏ï: r.lotNo,
        ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß_‡πÇ‡∏î‡∏™: r.dosesUsed,
        ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î_‡πÇ‡∏î‡∏™: r.dosesTotal,
        ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠_‡πÇ‡∏î‡∏™: remain,
        ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠: fmtDateTime(r.openedAt),
        ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤: fmtDateTime(r.expiresAt),
        ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: r.status,
        ‡πÄ‡∏ß‡∏•‡∏≤_‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: timeText,
      }
    })
    const ws = XLSX.utils.json_to_sheet(data)
    const wb = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(wb, ws, 'OpenVials')
    const stamp = new Date().toISOString().slice(0, 19).replace(/[:T]/g, '-')
    XLSX.writeFile(wb, `open-vials-${stamp}.xlsx`)
  }

  return (
    <div className="relative min-h-screen px-4 py-8">
      {/* Pastel background with extra violet */}
      <div className="pointer-events-none absolute inset-0 -z-10">
        <div className="absolute inset-0 bg-gradient-to-tr from-violet-50 via-sky-50 to-white" />
        <div className="absolute -top-28 -right-28 w-96 h-96 rounded-full bg-fuchsia-200/30 blur-3xl" />
        <div className="absolute -bottom-28 -left-28 w-[28rem] h-[28rem] rounded-full bg-sky-200/30 blur-3xl" />
      </div>

      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          <h1 className="text-2xl font-bold text-slate-800 flex items-center gap-2">
            <IconBadge size="lg"><BeakerIcon className="w-6 h-6" /></IconBadge>
            ‡∏Ç‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
          </h1>
        </div>
        <div className="flex gap-2">
          <Link
            href="/dashboard"
            className="inline-flex items-center gap-2 px-4 py-2 rounded-md text-white shadow-sm bg-gradient-to-r from-indigo-600 to-violet-600 hover:opacity-95"
            title="‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard"
          >
            <Squares2X2Icon className="w-5 h-5" />
            Dashboard
          </Link>
          <Link
            href="/stock"
            className="inline-flex items-center gap-2 px-4 py-2 rounded-md text-white shadow-sm bg-gradient-to-r from-fuchsia-600 to-sky-600 hover:opacity-95"
            title="‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô"
          >
            <BuildingStorefrontIcon className="w-5 h-5" />
            Stock
          </Link>
          <button
            onClick={load}
            className="flex items-center gap-2 bg-white border px-4 py-2 rounded-md shadow-sm hover:bg-slate-50 text-slate-700"
            title="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä"
          >
            <ArrowPathIcon className="w-5 h-5 text-sky-500" />
            ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
          </button>
          <button
            onClick={handleExportExcel}
            className="flex items-center gap-2 px-4 py-2 rounded-md text-white shadow-sm bg-gradient-to-r from-violet-500 via-fuchsia-500 to-sky-500 hover:opacity-95"
          >
            <ChartBarIcon className="w-5 h-5" />
            ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel
          </button>
        </div>
      </div>

      {/* Summary badges */}
      <div className="flex flex-wrap gap-2 mb-3">
        <RainbowChip label={`‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà ${totalOpen} ‡∏Ç‡∏ß‡∏î`} />
        <RainbowChip label={`‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏° ${totalRemain.toLocaleString()} ‡πÇ‡∏î‡∏™`} />
        <span className="inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium ring-1 bg-white ring-slate-200">
          ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {filtered.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </span>
        <span className="inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium ring-1 bg-emerald-50 text-emerald-700 ring-emerald-200">
          ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà {filtered.filter(r => r.status==='OPEN').length}
        </span>
        <span className="inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium ring-1 bg-rose-50 text-rose-700 ring-rose-200">
          ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ {filtered.filter(r => r.status==='EXPIRED').length}
        </span>
      </div>

      {/* Filters */}
      <div className="grid grid-cols-1 sm:grid-cols-5 gap-4 mb-6">
        <select
          value={warehouseId}
          onChange={(e) => setWarehouseId(e.target.value ? Number(e.target.value) : '')}
          className="px-3 py-2 border rounded-md bg-white border-slate-200 text-slate-800"
          title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏±‡∏á"
        >
          {warehouses.map((w) => (
            <option key={w.id} value={w.id}>
              {w.name} ({w.type})
            </option>
          ))}
        </select>

        <select
          value={status}
          onChange={(e) => setStatus(e.target.value as any)}
          className="px-3 py-2 border rounded-md bg-white border-slate-200 text-slate-800"
        >
          <option value="OPEN">‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ</option>
          <option value="EXPIRED">‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤</option>
          <option value="ALL">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
        </select>

        {/* ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (lot/vaccine name) */}
        <div className="sm:col-span-2 flex items-center border px-3 py-2 rounded-md bg-white border-slate-200">
          <MagnifyingGlassIcon className="w-5 h-5 text-slate-400" />
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ lot ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô"
            className="ml-2 w-full bg-transparent focus:outline-none text-slate-800 placeholder-slate-400"
            value={q}
            onChange={(e) => setQ(e.target.value)}
          />
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏±‡∏î ‚Äú‡∏î‡∏π‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‚Äù ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤ */}
        <div className="flex">
          <Link
            href={`/stock?warehouseId=${warehouseId || ''}&q=${encodeURIComponent(q)}${q ? `&focusLot=${encodeURIComponent(q)}` : ''}`}
            className="inline-flex items-center justify-center gap-2 w-full px-4 py-2 rounded-md text-slate-700 ring-1 ring-slate-200 bg-white hover:bg-slate-50"
            title="‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Stock ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ô‡∏µ‡πâ"
          >
            <BuildingStorefrontIcon className="w-5 h-5" />
            ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á (‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á)
          </Link>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white rounded-xl shadow-md ring-1 ring-slate-200">
          <thead className="bg-gradient-to-r from-violet-50 via-fuchsia-50 to-sky-50 text-slate-700">
            <tr>
              <th className="px-4 py-2 text-left">‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô</th>
              <th className="px-4 py-2 text-left">‡∏•‡πá‡∏≠‡∏ï</th>
              <th className="px-4 py-2 text-center">‡πÉ‡∏ä‡πâ‡πÑ‡∏õ/‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</th>
              <th className="px-4 py-2 text-center">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
              <th className="px-4 py-2 text-center">‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠</th>
              <th className="px-4 py-2 text-center">‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤</th>
              <th className="px-4 py-2 text-center">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th className="px-4 py-2 text-center">‡∏•‡∏¥‡∏á‡∏Å‡πå</th>
            </tr>
          </thead>
          <tbody className="[&>tr:nth-child(even)]:bg-slate-50">
            {loading && (
              <tr>
                <td colSpan={8} className="px-4 py-6 text-center text-slate-500">
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
                </td>
              </tr>
            )}

            {!loading &&
              filtered.map((r) => {
                const remain = Math.max(0, r.dosesTotal - r.dosesUsed)
                const ms = msLeft(r.expiresAt)
                return (
                  <tr
                    key={`${r.warehouseId}-${r.lotNo}`}
                    className={classNames(
                      'border-t border-slate-200/60 transition-colors',
                      ms <= 0
                        ? 'bg-rose-50/60 hover:bg-rose-50'
                        : 'hover:bg-gradient-to-r hover:from-violet-50/70 hover:to-sky-50/70'
                    )}
                  >
                    <td className="px-4 py-2 font-medium text-slate-800">
                      {r.vaccine?.name ?? '-'}
                    </td>
                    <td className="px-4 py-2 text-slate-600">
                      {r.lotNo}
                    </td>
                    <td className="px-4 py-2 text-center text-slate-700">
                      {r.dosesUsed.toLocaleString()} / {r.dosesTotal.toLocaleString()}
                    </td>
                    <td className="px-4 py-2 text-center">
                      <span className={classNames(
                        'px-2 py-1 text-sm rounded-full font-semibold',
                        remain <= 0 ? 'bg-rose-100 text-rose-700' :
                        remain < 5 ? 'bg-amber-100 text-amber-700' :
                        'bg-emerald-100 text-emerald-700'
                      )}>
                        {remain.toLocaleString()}
                      </span>
                    </td>
                    <td className="px-4 py-2 text-center text-slate-600">
                      {fmtDateTime(r.openedAt)}
                    </td>
                    <td className="px-4 py-2 text-center text-slate-600">
                      {fmtDateTime(r.expiresAt)}
                    </td>
                    <td className="px-4 py-2 text-center">
                      <span className={classNames(
                        'px-2 py-1 text-xs rounded-full ring-1',
                        r.status === 'OPEN'
                          ? leftBadge(ms)
                          : 'bg-rose-50 text-rose-700 ring-rose-200'
                      )}>
                        {r.status === 'OPEN' ? `‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${timeLeftText(ms)}` : '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß'}
                      </span>
                    </td>
                    <td className="px-4 py-2 text-center">
                      <Link
                        href={`/stock?warehouseId=${r.warehouseId}&q=${encodeURIComponent(r.lotNo)}&focusLot=${encodeURIComponent(r.lotNo)}`}
                        className="inline-flex items-center gap-1 px-2 py-1 text-xs rounded-md bg-white ring-1 ring-slate-200 hover:bg-slate-50 text-slate-700"
                        title="‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Stock"
                      >
                        <BuildingStorefrontIcon className="w-4 h-4" />
                        ‡∏î‡∏π‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
                      </Link>
                    </td>
                  </tr>
                )
              })}

            {!loading && filtered.length === 0 && (
              <tr>
                <td colSpan={8} className="text-center py-6 text-slate-400">
                  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Footer tips / error */}
      <div className="grid sm:grid-cols-2 gap-4 mt-6">
        <div className="bg-white border border-slate-200 p-4 rounded-md text-sm text-slate-600">
          <div className="font-semibold text-slate-800 mb-1 flex items-center gap-2">
            <IconBadge size="sm"><RectangleStackIcon className="w-4 h-4" /></IconBadge>
            ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
          </div>
          <ul className="list-disc pl-5 space-y-1">
            <li>‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ <b>openedAt</b> ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°</li>
            <li><b>expiresAt = openedAt + 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</b></li>
            <li>‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô <b>OPEN</b> ‡∏´‡∏£‡∏∑‡∏≠ <b>EXPIRED</b> ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</li>
          </ul>
          <div className="mt-2 text-xs text-slate-500">
            * ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏ß‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏ß‡∏î ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏•‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏¥‡πâ‡∏á)
          </div>
        </div>

        {error && (
          <div className="bg-rose-50 border border-rose-200 p-4 rounded-md text-sm text-rose-700">
            {error}
          </div>
        )}
      </div>

      {/* Tiny nav helper */}
      <div className="mt-4 text-sm text-slate-600 flex items-center gap-2">
        <ArrowTopRightOnSquareIcon className="w-4 h-4" />
        <span>‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°? ‡πÑ‡∏õ‡∏ó‡∏µ‡πà&nbsp;</span>
        <Link href="/stock" className="text-violet-700 hover:underline">/stock</Link>
      </div>
    </div>
  )
}
